@Tutorial(time: 10) {
  @XcodeRequirement(title: "Xcode 15 or later", destination: "https://itunes.apple.com/us/app/xcode/id497799835?mt=12")
  
  @Intro(title: "Text, Image, and Link") {
    Use Text, Image, and Link to build a little website about swimming pigs.
    
    Slipstream reuses many concepts from SwiftUI, making it easy to transfer your existing SwiftUI
    knowledge to building websites.

    @Image(source: "tutorial-banner", alt: "Coco the pig")
  }

  @Section(title: "Swimming pigs") {
    @ContentAndMedia {
      Meet Coco. Coco lives in the Bahamas, and likes to swim.

      We're going to make a little website about Coco, and also learn a bit more about Slipstream
      and Tailwind along the way üê∑

      @Image(source: "IntroducingSlipstream-YourFirstSite", alt: "Coco the swimming pig")    
    }

    @Steps {
      @Step {
        Let's add the photo file to our site. 
        [Save the photo of Coco](https://jeffverkoeyen.com/gfx/pig.jpeg) (or any picture really)
        to your `site/` folder. We'll name the file `coco.jpg`.

        @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-1", alt: "Xcode with the Coco the pig photo")
      }

      @Step {
        Open `main.swift`.
        
        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-2.swift")
      }
      
      @Step {
        And add an ``Image`` pointing to our `coco.jpg` file. Remember to run your executable and
        refresh to see your changes after each code change.

        Try resizing your browser to get a
        sense of how ``Container`` automatically adjusts your site width.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-3.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-3-preview", alt: "Coco the pig in a web site")
        }
      }
      
      @Step {
        Let's add a bit of ``Text``.
        
        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-4.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-4-preview", alt: "Coco the pig in a web site")
        }
      }
      
      @Step {
        And let's also add a ``Link`` to learn more about Coco'a family.
        
        Note that our link is black like the rest of the text, when we'd expect it to be blue
        because it's a link. Time to learn some Tailwind view modifiers!
        
        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-5.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-5-preview", alt: "Coco the pig in a web site")
        }
      }
    }
  }

  @Section(title: "Tailwind view modifiers") {
    @ContentAndMedia {
      Like SwiftUI, Slipstream uses view modifiers to enable easy customization of view styles.

      Tailwind CSS' utility classes work in a nearly identical way to SwiftUI's view modifiers, in
      that you're encouraged to annotate views with the styles you need and to create components
      and abstractions only once they become apparent / necessary.

      @Image(source: "IntroducingSlipstream-YourFirstSite", alt: "Coco the swimming pig")    
    }
    
    @Steps {
      @Step {
        Let's make our link blue by using the ``View/textColor(_:condition:)`` view modifier.
        
        Colors in Slipstream are modeled after [Tailwind CSS' colors](https://tailwindcss.com/docs/customizing-colors)
        which consist of a set of predefined palettes over a range of darkness stops.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-2-1.swift", previousFile: "IntroducingSlipstream-YourFirstSite-TextImageLink-1-5.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-2-1-preview", alt: "Our link is now blue")
        }
      }

      @Step {
        Let's also make our link respond to user interaction by implementing a hover effect. When
        the user hovers over the link with their cursor we'll add an underline effect to the text.

        The hover effect makes use of <doc:TailwindCSS-Conditions>, which are modeled after
        [Tailwind CSS' responsive design feature](https://tailwindcss.com/docs/responsive-design).
        Every view modifier in Slipstream allows you to provide an optional `condition:` that can
        be used to conditionally apply the style to the view. Conditions can be states like
        ``Condition/hover`` or viewport breakpoints like ``Breakpoint/medium``, or combinations of
        both.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-2-2.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-TextImageLink-2-2-preview", alt: "Our link is now blue")
        }
      }

      @Step {
        That's it! You now understand all of the basics required to make a static website with
        Slipstream.

        From here you'll want to continue learning about the different <doc:W3CViews> and
        <doc:TailwindCSS-Utilities> APIs provided in Slipstream, and also learn about the different
        forms of layout like ``HStack``, ``VStack``, and ``View/display(_:condition:)``.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-TextImageLink-2-2.swift")
      }
    }
  }
}
