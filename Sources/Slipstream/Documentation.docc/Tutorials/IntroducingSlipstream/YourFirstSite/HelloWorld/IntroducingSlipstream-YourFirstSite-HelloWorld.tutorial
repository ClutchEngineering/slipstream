@Tutorial(time: 15) {
  @XcodeRequirement(title: "Xcode 15 or later", destination: "https://itunes.apple.com/us/app/xcode/id497799835?mt=12")
  
  @Intro(title: "Hello, world!") {
    Learn the essential Slipstream concepts and workflow.

    This tutorial assumes you already have Xcode and Tailwind CSS installed and that you have a
    Swift package with Slipstream added as a dependency.

    @Image(source: "tutorial-banner", alt: "Coco the pig")
  }

  @Section(title: "Your first view") {
    @ContentAndMedia {
      Let's make our first ``View``. If you're familiar with SwiftUI then you'll breeze through
      this section.

      @Image(source: "logo-square", alt: "The Slipstream logo. The Swift bird logo is flying off the edge of the Tailwind CSS wind logo")    
    }

    @Steps {
      @Step {
        Like SwiftUI, every project in Slipstream starts with a ``View``.
        
        Open up main.swift.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-1-1.swift")
      }

      @Step {
        Remove the boilerplate and add a new ``View`` type called `Home`.
        
        This view will be the root view for our home page.
        
        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-1-2.swift")
      }

      @Step {
        Let's render the view to see what the output looks like. We'll use
        ``renderHTML(_:)`` to render our view to a string that we can print to the console. Run your
        executable to see the output.

        Notice that the output includes our text wrapped inside of a `<p>` element. Every View type
        in Slipstream will produce some kind of an HTML element. When possible, Slipstream tries to
        match the generated code to similar behavior for the view's SwiftUI equivalent.
        <doc:SlipstreamforSwiftUIDevelopers> provides a complete outline of the overlap between
        SwiftUI and Slipstream.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-1-3.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-1-3-preview", alt: "The output from rendering our view: <p>Hello, world!</p>")
        }
      }
    }
  }
  
  @Section(title: "Rendering to disk") {
    @ContentAndMedia {
      Now that we've made our first Slipstream view, let's get it saved to disk so that we can
      preview the output to a browser.

      @Image(source: "logo-square", alt: "The Slipstream logo. The Swift bird logo is flying off the edge of the Tailwind CSS wind logo")
    }

    @Steps {
      @Step {
        Slipstream provides a barebones site renderer that requires we define a ``Sitemap``, essentially
        a map of filepaths to ``View`` instances.

        To use it we first define our sitemap.
        
        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-1.swift", previousFile: "IntroducingSlipstream-YourFirstSite-HelloWorld-1-3.swift")
      }

      @Step {
        Next we need to define where we want to output our site to. In most cases just writing to
        your project directory is going to be sufficient, but you could extend functionality with
        more options if needed.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-2.swift")
      }

      @Step {
        We can now use ``renderSitemap(_:to:encoding:)`` to output our generated site to our project
        folder.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-3.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-3-preview", alt: "The output from rendering our sitemap")
        }
      }

      @Step {
        Congratulations! You've just generated your first Slipstream html page! ðŸŽ‰ It ain't pretty
        (yet!), but it's yours ðŸ˜‰

        You can try previewing `index.html` by right clicking it in Xcode and clicking "Open
        with External Editor".

        @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-4", alt: "The output from rendering our sitemap")
      }
    }
  }

  @Section(title: "Adding structure and style") {
    @ContentAndMedia {
      With the basic rendering workflow under control we can now add some structure and style to
      our site using Tailwind CSS concepts.

      If you're not familiar with Tailwind CSS, their article on Tailwind's
      [Utility-First Fundamentals](https://tailwindcss.com/docs/utility-first) is a great intro to
      the motivations behind Tailwind CSS.

      @Image(source: "logo-square", alt: "The Slipstream logo. The Swift bird logo is flying off the edge of the Tailwind CSS wind logo")
    }

    @Steps {
      @Step {
        In order to load the CSS necessary for styling our site, we'll first need to create a
        properly structured HTML page.

        There's [*tons* to learn](https://www.w3schools.com/html/html_intro.asp) about building web pages so
        we'll start simple with just essentials: ``HTML``, ``Head``, and ``Body``.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-1.swift", previousFile: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-3.swift")
      }

      @Step {
        Within ``Head`` we can now load the stylesheet that Tailwind CSS will generate for us.  

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-2.swift")
      }

      @Step {
        Many web pages start with a ``Container``.

        Tailwind [containers](https://tailwindcss.com/docs/container) apply constraints to our
        site's width, making it easier to design for mobile & desktop form factors.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-3.swift")
      }

      @Step {
        Try rendering our site again by running your executable. Once finished, refresh the
        generated index.html file in your browser.

        Even though we added a container, nothing changed! This is in part because we haven't
        generated our main.css file yet. Let's do that.

        @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-2-4", alt: "The output from rendering our sitemap")
      }

      @Step {
        Tailwind CSS has a command line tool that is able to generate exactly the CSS required to
        style our site, but we need to tell Tailwind which files to observe first.
        
        Open `tailwind.config.js` in the root of your project and add the output path for our site's
        generated html files to the `content` field.
        
        @Code(name: "tailwind.config.js", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-5.js", previousFile: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-5-prior.js")
      }

      @Step {
        Open Terminal again and navigate to your project's root directory (where your
        `tailwind.config.js` and `Package.swift` files are). Start the `tailwindcss` daemon.
        
        The `--watch` argument tells Tailwind to continuously watch for any changes to our html
        files. When it detects changes, it will automatically regenerate the main.css file again.
        
        @Code(name: "Terminal", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-6.sh")
      }

      @Step {
        Open your browser again and refresh your page. It should look a bit different now!

        If we open up our developer console (Cmd+Option+I) we can see that our `container` class
        is now being styled with a max-width appropriate for the browser's current width. If you're
        not able to open the developer console you may need to enable it in your browser's settings
        (Safari: Cmd+comma, click Advanced, and enable "Show features for web developers").

        @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-7", alt: "The output from rendering our sitemap")
      }

      @Step {
        Let's practice this workflow by playing with some styles on the page. Open `main.swift`
        again and change the font size of our text using the ``View/fontSize(_:condition:)-8lb7v``
        modifier. Run your executable and refresh your browser to see the changes.
        
        If everything succeeded you should see your text in a larger font now. If it doesn't change
        right away, check that tailwindcss is still running and that it detected the change to your
        html files.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-8.swift", previousFile: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-3.swift") {
          @Image(source: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-8-preview", alt: "The output from rendering our styled text")
        }
      }

      @Step {
        You've now implemented the core Slipstream iteration workflow, congrats!
        
        As a recap, you've created a Swift executable package that, when ran, renders html to
        disk based on the ``View`` definitions you created. `tailwindcss` then observes changes
        to those html files and regenerates the `main.css` file. When you load the resulting html
        file you then see the result of both Slipstream and Tailwind working together to build
        your website.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-8.swift")
      }
      
      @Step {
        For further learning consider reading Slipstream's <doc:W3CViews> documentation for a list
        of all supported HTML views, and Slipstream's <doc:TailwindCSS-Utilities> documentation
        for the full set of supported Tailwind utility modifiers.

        @Code(name: "main.swift", file: "IntroducingSlipstream-YourFirstSite-HelloWorld-3-8.swift")
      }
    }
  }
}
