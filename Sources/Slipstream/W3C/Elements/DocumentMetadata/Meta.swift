import Foundation

import SwiftSoup

/// A view that represents various kinds of metadata that cannot be expressed
/// using the ``Title``, ``Base``, ``Stylesheet``, and ``Script`` views.
///
/// ```swift
/// struct MySiteMetadata: View {
///   var body: some View {
///     Head {
///       Meta(.description, content: "My cool site")
///     }
///   }
/// }
/// ```
///
/// - SeeAlso: W3C [`meta charset`](https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element) specification.
/// - SeeAlso: WHATWG [meta extensions](https://wiki.whatwg.org/wiki/MetaExtensions).
@available(iOS 17.0, macOS 14.0, *)
public struct Meta: View {
  /// A W3C HTML standard name.
  ///
  /// - SeeAlso: W3C's [4.2.5.1 Standard metadata names](https://html.spec.whatwg.org/multipage/semantics.html#standard-metadata-names).
  public enum StandardName: String {
    /// The value must be a short free-form string giving the name of the web application
    /// that the page represents. If the page is not a web application, this value must not
    /// be used. Translations of the web application's name may be given, using the
    /// ``View/language(_:)`` attribute to specify the language of each name.
    ///
    /// User agents may use the application name in UI in preference to the page's title,
    /// since the title might include status messages and the like relevant to the status
    /// of the page at a particular moment in time instead of just being the name of the
    /// application.
    case applicationName = "application-name"

    /// The value must be a free-form string giving the name of one of the page's
    /// authors.
    case author

    /// To aid user agents in rendering the page background with the desired color
    /// scheme immediately (rather than waiting for all CSS in the page to load), a
    /// 'color-scheme' value can be provided in a meta element.
    ///
    /// The value must be a string that matches the syntax for the CSS
    /// [color-scheme](https://drafts.csswg.org/css-color-adjust/#color-scheme-prop)
    /// property value.
    case colorScheme = "color-scheme"

    /// The value must be a free-form string that describes the page. The value must
    /// be appropriate for use in a directory of pages, e.g. in a search engine. There
    /// must not be more than one ``Meta`` element with this name per
    /// document.
    case description

    /// The value must be a free-form string that identifies one of the software
    /// packages used to generate the document. This value must not be used on
    /// pages whose markup is not generated by software, e.g. pages whose
    /// markup was written by a user in a text editor.
    case generator

    /// The value must be a set of comma-separated tokens, each of which
    /// is a keyword relevant to the page.
    case keywords

    /// The value must be a referrer policy, which defines the default referrer policy
    /// for the Document.
    case referrer

    /// The value must be a valid CSS [`<color>`](https://drafts.csswg.org/css-color/#typedef-color),
    /// defining a suggested color that user agents should use to customize the
    /// display of the page or of the surrounding user interface. For example, a
    /// browser might color the page's title bar with the specified value, or use it
    /// as a color highlight in a tab bar or task switcher.
    case themeColor = "theme-color"
  }

  /// Creates a Meta view using a W3C standard meta name.
  public init(_ name: StandardName, content: String) {
    self.name = name.rawValue
    self.content = content
  }

  /// Creates a Meta view.
  public init(_ name: String, content: String) {
    self.name = name
    self.content = content
  }

  @_documentation(visibility: private)
  public func render(_ container: Element, environment: EnvironmentValues) throws {
    let element = try container.appendElement("meta")
    if name.hasPrefix("og:") {
      try element.attr("property", name)
    } else {
      try element.attr("name", name)
    }
    try element.attr("content", content)
  }

  private let name: String
  private let content: String
}
